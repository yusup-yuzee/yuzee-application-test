{
	"info": {
		"_postman_id": "51711ae4-d023-40d7-93f0-f95e830b90ae",
		"name": "GitHub Actions",
		"description": "An automated workflow, that the Postman API tests runs periodically ever 5 minutes using GitHub Actions  \n  \nSubmits +20 RMO course applications through Postman and makes +10 offers of differnet institutions to each RMO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30425731"
	},
	"item": [
		{
			"name": "1- Login",
			"item": [
				{
					"name": "Login Institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Check if the response contains access_token\r",
									"pm.test(\"Access token is present\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"});\r",
									"\r",
									"// Check if access_token is in correct format (JWT)\r",
									"pm.test(\"Access token is a valid JWT\", function () {\r",
									"    const token = jsonData.access_token;\r",
									"    const tokenParts = token.split('.');\r",
									"    pm.expect(tokenParts).to.have.lengthOf(3);\r",
									"});\r",
									"\r",
									"// Verify that the access token has been stored correctly\r",
									"pm.collectionVariables.set(\"loginToken\", jsonData.access_token);\r",
									"pm.test(\"Access token is stored in the collection variable\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"loginToken\")).to.eql(jsonData.access_token);\r",
									"});\r",
									"\r",
									"// Check if expires_in is greater than 0\r",
									"pm.test(\"Token expiration is valid\", function () {\r",
									"    pm.expect(jsonData.expires_in).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid email profile",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{institutionOwnerEmail}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "admin-cli",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/auth/realms/yuzee/protocol/openid-connect/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"realms",
								"yuzee",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Applicant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Check if the response contains access_token\r",
									"pm.test(\"Access token is present\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"});\r",
									"\r",
									"// Check if access_token is in correct format (JWT)\r",
									"pm.test(\"Access token is a valid JWT\", function () {\r",
									"    const token = jsonData.access_token;\r",
									"    const tokenParts = token.split('.');\r",
									"    pm.expect(tokenParts).to.have.lengthOf(3);\r",
									"});\r",
									"\r",
									"// Verify that the access token has been stored correctly\r",
									"pm.collectionVariables.set(\"applicantLoginToken\", jsonData.access_token);\r",
									"pm.test(\"Access token is stored in the collection variable\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"applicantLoginToken\")).to.eql(jsonData.access_token);\r",
									"});\r",
									"\r",
									"// Check if expires_in is greater than 0\r",
									"pm.test(\"Token expiration is valid\", function () {\r",
									"    pm.expect(jsonData.expires_in).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid email profile",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{applicantEmail}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "admin-cli",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/auth/realms/yuzee/protocol/openid-connect/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"realms",
								"yuzee",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Check if the response contains access_token\r",
									"pm.test(\"Access token is present\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"});\r",
									"\r",
									"// Check if access_token is in correct format (JWT)\r",
									"pm.test(\"Access token is a valid JWT\", function () {\r",
									"    const token = jsonData.access_token;\r",
									"    const tokenParts = token.split('.');\r",
									"    pm.expect(tokenParts).to.have.lengthOf(3);\r",
									"});\r",
									"\r",
									"// Verify that the access token has been stored correctly\r",
									"pm.collectionVariables.set(\"adminLoginToken\", jsonData.access_token);\r",
									"pm.test(\"Access token is stored in the collection variable\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"adminLoginToken\")).to.eql(jsonData.access_token);\r",
									"});\r",
									"\r",
									"// Check if expires_in is greater than 0\r",
									"pm.test(\"Token expiration is valid\", function () {\r",
									"    pm.expect(jsonData.expires_in).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid email profile",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{adminPassword}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{adminEmail}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "admin-cli",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/auth/realms/yuzee/protocol/openid-connect/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"realms",
								"yuzee",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2 - Create Institutions",
			"item": [
				{
					"name": "Create Institution",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Number of institutions to create\r",
									"const totalInstitutions = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"let currentInstitutionCount = pm.collectionVariables.get(\"currentInstitutionCount\") || 0;\r",
									"\r",
									"// Check if we've reached the target number of institutions\r",
									"if (currentInstitutionCount <= totalInstitutions) {\r",
									"    // Generate a unique institution name\r",
									"    let institutionName = pm.variables.replaceIn('{{$randomCompanyName}} Institution') + ` ${currentInstitutionCount + 1}`;\r",
									"    let institutionReadableId = institutionName.toLowerCase()\r",
									"        .replace(/,/g, '')\r",
									"        .replace(/\\s+/g, '-')\r",
									"        .replace(/-+/g, '-');\r",
									"\r",
									"    // Create the request body as a JavaScript object\r",
									"    let requestBody = {\r",
									"        institute_affiliaction_type: \"PUBLIC\",\r",
									"        institute_type: [\"UNIVERSITY\"],\r",
									"        business_account_type: null,\r",
									"        address: \"Ground Floor/277 William St, Melbourne VIC 3000, Australia\",\r",
									"        city_name: \"Melbourne\",\r",
									"        country_name: \"Australia\",\r",
									"        institute_timings: [\r",
									"            { day_of_week: \"MONDAY\", open_at: \"7:00 AM\", close_at: \"10:00 PM\", is_off_day: false },\r",
									"            { day_of_week: \"TUESDAY\", open_at: \"7:00 AM\", close_at: \"10:00 PM\", is_off_day: false },\r",
									"            { day_of_week: \"WEDNESDAY\", open_at: \"7:00 AM\", close_at: \"10:00 PM\", is_off_day: false },\r",
									"            { day_of_week: \"THURSDAY\", open_at: \"7:00 AM\", close_at: \"10:00 PM\", is_off_day: false },\r",
									"            { day_of_week: \"FRIDAY\", open_at: \"7:00 AM\", close_at: \"9:00 PM\", is_off_day: false }\r",
									"        ],\r",
									"        latitude: -37.81254,\r",
									"        longitude: 144.9563499,\r",
									"        name: institutionName,\r",
									"        readable_id: institutionReadableId,\r",
									"        postal_code: \"3000\",\r",
									"        provider_codes: [\r",
									"            { name: \"ABN\", value: \"{{$randomInt}}\" },\r",
									"            { name: \"RTO\", value: \"{{$randomInt}}\" }\r",
									"        ],\r",
									"        public_url: \"\",\r",
									"        state_name: \"VIC\",\r",
									"        tag_line: \"{{$randomLoremSentence}}\",\r",
									"        website: \"{{$randomUrl}}\"\r",
									"    };\r",
									"\r",
									"    // Set the request body as a JSON string in a variable\r",
									"    pm.variables.set(\"requestBody\", JSON.stringify(requestBody));\r",
									"\r",
									"    // Set institution name and readable ID to collection variables with unique names\r",
									"    pm.collectionVariables.set(`institutionName${currentInstitutionCount + 1}`, institutionName);\r",
									"    pm.collectionVariables.set(`institutionReadableId${currentInstitutionCount + 1}`, institutionReadableId);\r",
									"\r",
									"    // Update count in collection variable to keep track\r",
									"    pm.collectionVariables.set(\"currentInstitutionCount\", Number(currentInstitutionCount) + 1);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the current count\r",
									"const totalInstitutions = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"let currentInstitutionCount = pm.collectionVariables.get(\"currentInstitutionCount\") || 0;\r",
									"\r",
									"// Validate the response\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Institute Created Successfully\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Institute Created Successfully.\");\r",
									"});\r",
									"\r",
									"// Save the institution ID in collection variable with a unique name\r",
									"let jsonData = pm.response.json();\r",
									"if (jsonData.data && jsonData.data.length > 0) {\r",
									"    pm.collectionVariables.set(`institutionId${currentInstitutionCount}`, jsonData.data[0].institute_id);\r",
									"    console.log(`Saved institutionId${currentInstitutionCount}: ${jsonData.data[0].institute_id}`);\r",
									"} else {\r",
									"    console.log(\"No institution data returned in the response\");\r",
									"}\r",
									"\r",
									"if (currentInstitutionCount < totalInstitutions) {\r",
									"    pm.execution.setNextRequest(\"Create Institution\");\r",
									"} else {\r",
									"    console.log(\"All institutions created and IDs saved in collection variables.\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionCount\");\r",
									"    pm.execution.setNextRequest(\"Create Course\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "USER",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {{requestBody}}\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/institute/api/v1/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"institute",
								"api",
								"v1",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3 - Create Course for Each Isntitution",
			"item": [
				{
					"name": "Create Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response\r",
									"let jsonData = pm.response.json();\r",
									"let currentCourseIndexResponse = pm.collectionVariables.get(\"currentCourseIndex\") - 1;\r",
									"\r",
									"// Check if status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if message is correct\r",
									"pm.test(\"Message is 'Course Created successfully'\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Course Created successfully\");\r",
									"});\r",
									"\r",
									"// Check if courseId is returned and store it\r",
									"pm.test(\"Course ID is present\", function () {\r",
									"    pm.expect(jsonData.data).to.not.be.null;\r",
									"    const courseId = jsonData.data;\r",
									"    pm.collectionVariables.set(`courseId${currentCourseIndexResponse + 1}`, courseId);\r",
									"    \r",
									"    console.log(`Course courseId${currentCourseIndexResponse + 1} - ${courseId} created`);\r",
									"});\r",
									"\r",
									"// Check if we are at the 10th iteration\r",
									"if (currentCourseIndexResponse + 1 === 10) {\r",
									"    console.log(\"All courses created successfully. Stopping further iterations.\");\r",
									"    pm.collectionVariables.unset(\"currentCourseIndex\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionId\");\r",
									"    pm.execution.setNextRequest(\"Add Course Intake\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the total number of courses to add\r",
									"const totalCourses = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"\r",
									"// Retrieve the current course index\r",
									"let currentCourseIndex = pm.collectionVariables.get(\"currentCourseIndex\") || 0;\r",
									"\r",
									"if (currentCourseIndex < totalCourses) {\r",
									"    // Set `currentInstitutionId` based on the current course index\r",
									"    let currentInstitutionId = pm.collectionVariables.get(`institutionId${currentCourseIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentInstitutionId\", currentInstitutionId);\r",
									"\r",
									"    // Set request body for course creation\r",
									"    pm.request.body.raw = JSON.stringify({\r",
									"        categories: [\r",
									"            {\r",
									"                name: \"UNDERGRADUATE\",\r",
									"                display_name: \"Undergraduate\"\r",
									"            }\r",
									"        ],\r",
									"        course_code: `ABCD${pm.variables.get(\"randomInt\")}`,\r",
									"        course_type: \"STANDARD_COURSE\",\r",
									"        description: `${pm.variables.get(\"randomLoremSentence\")} ${pm.variables.get(\"randomLoremSentence\")}`,\r",
									"        name: `${pm.variables.get(\"randomJobArea\")} Course`,\r",
									"        faculty_id: \"3ed56433-1a16-44ce-a23c-862032a91aa5\",\r",
									"        level_id: \"71636627-502e-487c-b6f0-5d40ce740e67\",\r",
									"        provider_codes: [\r",
									"            {\r",
									"                name: \"CRICOS\",\r",
									"                value: `A${pm.variables.get(\"randomInt\")}`\r",
									"            }\r",
									"        ],\r",
									"        target_audience: \"BOTH\",\r",
									"        vocational_type: \"\"\r",
									"    });\r",
									"\r",
									"    // Set request to create the next course\r",
									"    pm.collectionVariables.set(\"currentCourseIndex\", currentCourseIndex + 1);\r",
									"    pm.execution.setNextRequest(\"Create Course\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{currentInstitutionId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "INSTITUTE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n    \"categories\": [\r\n        {\r\n        \"name\": \"UNDERGRADUATE\",\r\n        \"display_name\": \"Undergraduate\"\r\n        }\r\n    ],\r\n    \"course_code\": \"ABCD{{$randomInt}}\",\r\n    \"course_type\": \"STANDARD_COURSE\",\r\n    \"description\": \"{{$randomLoremSentence}} {{$randomLoremSentence}}\",\r\n    \"name\": \"{{$randomJobArea}} Course\",\r\n    \"faculty_id\": \"3ed56433-1a16-44ce-a23c-862032a91aa5\",\r\n    \"level_id\": \"71636627-502e-487c-b6f0-5d40ce740e67\",\r\n    \"provider_codes\": [\r\n        {\r\n        \"name\": \"CRICOS\",\r\n        \"value\": \"A{{$randomInt}}\"\r\n        }\r\n    ],\r\n    \"target_audience\": \"BOTH\",\r\n    \"vocational_type\": \"\"\r\n    }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/institute/api/v1/institute/{{currentInstitutionId}}/course",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"institute",
								"api",
								"v1",
								"institute",
								"{{currentInstitutionId}}",
								"course"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Course Intake",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the total number of courses to add intakes for\r",
									"const totalCourses = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"let currentCourseIndex = pm.collectionVariables.get(\"currentCourseIndex\") || 0;\r",
									"\r",
									"// Ensure currentCourseIndex is 0-based for proper indexing\r",
									"if (currentCourseIndex < totalCourses) {\r",
									"    // Retrieve currentCourseId and currentInstitutionId based on currentCourseIndex\r",
									"    let currentCourseId = pm.collectionVariables.get(`courseId${currentCourseIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentCourseId\", currentCourseId);\r",
									"\r",
									"    let currentInstitutionId = pm.collectionVariables.get(`institutionId${currentCourseIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentInstitutionId\", currentInstitutionId);\r",
									"\r",
									"    // Generate today's date as `startDate`\r",
									"    const today = new Date();\r",
									"    const startDate = today.toISOString().split('T')[0];\r",
									"\r",
									"    // Calculate `endDate` by adding 2 months\r",
									"    const endDate = new Date(today);\r",
									"    endDate.setMonth(today.getMonth() + 2);\r",
									"    const formattedEndDate = endDate.toISOString().split('T')[0];\r",
									"\r",
									"    // Set request body with generated dates\r",
									"    pm.request.body.raw = JSON.stringify({\r",
									"        intake_date: [\r",
									"            {\r",
									"                intake_date_type: \"ROLLING\",\r",
									"                start_date: startDate,\r",
									"                end_date: formattedEndDate\r",
									"            }\r",
									"        ],\r",
									"        type: \"SPECIFIC\"\r",
									"    });\r",
									"\r",
									"    // Store startDate and endDate in collection variables\r",
									"    pm.collectionVariables.set(\"startDate\", startDate);\r",
									"    pm.collectionVariables.set(\"endDate\", formattedEndDate);\r",
									"\r",
									"    // Increment the index for the next iteration\r",
									"    pm.collectionVariables.set(\"currentCourseIndex\", currentCourseIndex + 1);\r",
									"\r",
									"    // Set next request to loop on the same request for the next course\r",
									"    pm.execution.setNextRequest(\"Add Course Intake\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Check if the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if the success message is correct\r",
									"pm.test(\"Success message is 'Course Intakes added successfully.'\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Course Intakes added successfully.\");\r",
									"});\r",
									"\r",
									"// Retrieve the current course index\r",
									"let currentCourseIndex = pm.collectionVariables.get(\"currentCourseIndex\");\r",
									"let currentCourseId = pm.collectionVariables.get(`courseId${currentCourseIndex}`);\r",
									"\r",
									"// Log intake creation confirmation for the current course\r",
									"console.log(`Intake for courseId${currentCourseIndex} (${currentCourseId}) added successfully.`);\r",
									"\r",
									"// Check if we are at the 10th iteration\r",
									"if (currentCourseIndex === 10) {\r",
									"    console.log(\"Intakes for all courses created successfully. Stopping further iterations.\");\r",
									"    pm.collectionVariables.unset(\"currentCourseIndex\");\r",
									"    pm.collectionVariables.unset(\"currentCourseId\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionId\");\r",
									"    pm.execution.setNextRequest(\"Add Entry Requirements\");\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{currentInstitutionId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "INSTITUTE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// Data generated in pre-prequest script and passed to body directly",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/institute/api/v1/course/{{currentCourseId}}/intake",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"institute",
								"api",
								"v1",
								"course",
								"{{currentCourseId}}",
								"intake"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Entry Requirements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Check response status\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check message is correct\r",
									"pm.test(\"Message indicates success\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Course Minimum Requirements saved successfully.\");\r",
									"});\r",
									"\r",
									"// Validate that the 'countries' array is present in the response data\r",
									"pm.test(\"Data contains countries array\", function () {\r",
									"    pm.expect(jsonData.data).to.have.property(\"countries\").that.is.an(\"array\");\r",
									"    pm.expect(jsonData.data.countries.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"// Check the structure of the 'countries' object is correct\r",
									"pm.test(\"Countries array contains correct structure\", function () {\r",
									"    const countries = jsonData.data.countries[0];\r",
									"    const grading = countries.grading_system[0];\r",
									"    pm.expect(countries).to.have.all.keys(\"country_name\", \"state_name\", \"grading_system\");\r",
									"    pm.expect(countries.grading_system).to.be.an(\"array\").that.is.not.empty;\r",
									"    pm.expect(grading).to.have.all.keys(\"grading_system\", \"grading_gp\");\r",
									"});\r",
									"\r",
									"// Validate that 'study_languages' array is present in the response data\r",
									"pm.test(\"Data contains study_languages array\", function () {\r",
									"    pm.expect(jsonData.data).to.have.property(\"study_languages\").that.is.an(\"array\");\r",
									"    pm.expect(jsonData.data.study_languages.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"// Log the completion of minimum requirements addition for the current course\r",
									"let currentCourseIndex = pm.collectionVariables.get(\"currentCourseIndex\");\r",
									"let currentCourseId = pm.collectionVariables.get(`courseId${currentCourseIndex}`);\r",
									"console.log(`Minimum requirement for courseId${currentCourseIndex} (${currentCourseId}) added successfully.`);\r",
									"\r",
									"// Cleanup after all courses are processed\r",
									"const totalCourses = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"if (currentCourseIndex >= totalCourses) {\r",
									"    console.log(\"Entry requirements for all courses created successfully. Stopping further iterations.\");\r",
									"    pm.collectionVariables.unset(\"currentCourseIndex\");\r",
									"    pm.collectionVariables.unset(\"currentCourseId\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionId\");\r",
									"    pm.execution.setNextRequest(\"Add Fees and Mode\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the total number of courses for which to add minimum requirements\r",
									"const totalCourses = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"let currentCourseIndex = pm.collectionVariables.get(\"currentCourseIndex\") || 0;\r",
									"\r",
									"if (currentCourseIndex < totalCourses) {\r",
									"    // Retrieve the course ID based on the current index\r",
									"    let currentCourseId = pm.collectionVariables.get(`courseId${currentCourseIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentCourseId\", currentCourseId);\r",
									"\r",
									"    let currentInstitutionId = pm.collectionVariables.get(`institutionId${currentCourseIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentInstitutionId\", currentInstitutionId);\r",
									"\r",
									"    // Increment the index for the next iteration\r",
									"    pm.collectionVariables.set(\"currentCourseIndex\", currentCourseIndex + 1);\r",
									"\r",
									"    // Set next request to loop on the same request for the next course\r",
									"    pm.execution.setNextRequest(\"Add Entry Requirements\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{currentInstitutionId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "INSTITUTE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"countries\": [\r\n        {\r\n            \"country_name\": \"Australia\",\r\n            \"state_name\": \"Western Australia\",\r\n            \"grading_system\": [\r\n                {\r\n                    \"grading_system\": \"C-GPA (out of 5)\",\r\n                    \"grading_gp\": \"5\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"study_languages\": [\"English\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/institute/api/v1/course/{{currentCourseId}}/min-requirement",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"institute",
								"api",
								"v1",
								"course",
								"{{currentCourseId}}",
								"min-requirement"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Fees and Mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Check response status\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check message is correct\r",
									"pm.test(\"Message indicates success\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Course DeliveryMode added/ updated successfully.\");\r",
									"});\r",
									"\r",
									"// Log the completion of delivery mode addition for the current course\r",
									"let currentCourseIndex = pm.collectionVariables.get(\"currentCourseIndex\");\r",
									"let currentCourseId = pm.collectionVariables.get(`courseId${currentCourseIndex}`);\r",
									"console.log(`Delivery mode for courseId${currentCourseIndex} (${currentCourseId}) added successfully.`);\r",
									"\r",
									"// Cleanup after all courses are processed\r",
									"const totalCourses = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"if (currentCourseIndex >= totalCourses) {\r",
									"    console.log(\"Delivery modes added for all courses successfully. Stopping further iterations.\");\r",
									"    pm.collectionVariables.unset(\"currentCourseIndex\");\r",
									"    pm.collectionVariables.unset(\"currentCourseId\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionId\");\r",
									"    pm.collectionVariables.unset(\"deliveryType\");\r",
									"    pm.collectionVariables.unset(\"studyType\");\r",
									"    pm.execution.setNextRequest(\"Get Domestic Application Procedure\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the total number of courses for which to add delivery modes\r",
									"const totalCourses = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"let currentCourseIndex = pm.collectionVariables.get(\"currentCourseIndex\") || 0;\r",
									"\r",
									"if (currentCourseIndex < totalCourses) {\r",
									"    // Retrieve the course ID based on the current index\r",
									"    let currentCourseId = pm.collectionVariables.get(`courseId${currentCourseIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentCourseId\", currentCourseId);\r",
									"\r",
									"    let currentInstitutionId = pm.collectionVariables.get(`institutionId${currentCourseIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentInstitutionId\", currentInstitutionId);\r",
									"\r",
									"    // Get random delivery and mode types\r",
									"    const deliveryTypes = [\"CLASSROOM\", \"ONLINE\", \"BLENDED\"];\r",
									"    const studyTypes = [\"FULL_TIME\", \"PART_TIME\"];\r",
									"    const randomDeliveryType = deliveryTypes[Math.floor(Math.random() * deliveryTypes.length)];\r",
									"    const randomStudyType = studyTypes[Math.floor(Math.random() * studyTypes.length)];\r",
									"\r",
									"    // Set the variables for delivery and study types\r",
									"    pm.collectionVariables.set(\"deliveryType\", randomDeliveryType);\r",
									"    pm.collectionVariables.set(\"studyType\", randomStudyType);\r",
									"\r",
									"    // Increment the index for the next iteration\r",
									"    pm.collectionVariables.set(\"currentCourseIndex\", currentCourseIndex + 1);\r",
									"\r",
									"    // Set next request to loop on the same request for the next course\r",
									"    pm.execution.setNextRequest(\"Add Fees and Mode\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{currentInstitutionId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "INSTITUTE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"course_delivery_modes\": [\r\n        {\r\n            \"study_mode\": \"{{studyType}}\",\r\n            \"delivery_type\": \"{{deliveryType}}\",\r\n            \"duration\": 6.0,\r\n            \"duration_time\": \"MONTH\",\r\n            \"fees\": [\r\n                {\r\n                    \"name\": \"Course Fee\",\r\n                    \"amount\": 3000.0,\r\n                    \"currency\": \"AUD\",\r\n                    \"funding_name\": \"Skills First\"\r\n                }\r\n            ],\r\n            \"is_government_eligible\": false,\r\n            \"modeType\": \"DOMESTIC\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/institute/api/v1/course/{{currentCourseId}}/delivery-mode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"institute",
								"api",
								"v1",
								"course",
								"{{currentCourseId}}",
								"delivery-mode"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Domestic Application Procedure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response data\r",
									"let jsonData = pm.response.json();\r",
									"let totalInstitutions = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"\r",
									"// Check response status\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verify response message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Procedure list retrieved successfully.\");\r",
									"});\r",
									"\r",
									"// Check that response data array is not empty\r",
									"pm.test(\"Response data array is not empty\", function () {\r",
									"    pm.expect(jsonData.data.response).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Store domestic procedure ID for the current institution\r",
									"let currentInstitutionIndex = pm.collectionVariables.get(\"currentInstitutionIndex\");\r",
									"let procedure = jsonData.data.response[0];\r",
									"pm.collectionVariables.set(`domesticProcedureId${currentInstitutionIndex}`, procedure.id);\r",
									"console.log(`Domestic procedure ID for institution ${currentInstitutionIndex}: ${procedure.id}`);\r",
									"\r",
									"// Verify procedure details\r",
									"pm.test(\"Procedure details are correct\", function () {\r",
									"    pm.expect(procedure.id).to.be.a(\"string\");\r",
									"    pm.expect(procedure.name).to.eql(\"Generic Domestic Application Procedure\");\r",
									"    pm.expect(procedure.entity_id).to.be.a(\"string\");\r",
									"    pm.expect(procedure.entity_type).to.eql(\"COURSE\");\r",
									"    pm.expect(procedure.student_type).to.eql(\"DOMESTIC\");\r",
									"    pm.expect(procedure.status).to.eql(\"ACTIVE\");\r",
									"});\r",
									"\r",
									"// Verify accessible_by data\r",
									"pm.test(\"Accessible by data is correct\", function () {\r",
									"    pm.expect(procedure.accessible_by.accessible_by_type).to.eql(\"ONLY_ME\");\r",
									"    pm.expect(procedure.accessible_by.accessible_by).to.be.an(\"array\").with.lengthOf(1);\r",
									"});\r",
									"\r",
									"// Verify procedure steps\r",
									"pm.test(\"Procedure steps are correct\", function () {\r",
									"    pm.expect(procedure.procedure_steps).to.be.an(\"array\").with.lengthOf(5);\r",
									"    procedure.procedure_steps.forEach((step, index) => {\r",
									"        pm.expect(step.procedure_step_id).to.be.a(\"string\");\r",
									"        pm.expect(step.step_order).to.eql(index + 1);\r",
									"        pm.expect(step.status).to.be.a(\"boolean\");\r",
									"        if (step.properties) {\r",
									"            pm.expect(step.properties).to.be.an(\"object\");\r",
									"            if (step.properties.NO_OF_DAYS) {\r",
									"                pm.expect(step.properties.NO_OF_DAYS).to.match(/^\\d+$/);\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"// Check timestamps for creation and update\r",
									"pm.test(\"Created and updated timestamps are present\", function () {\r",
									"    pm.expect(procedure.created_on).to.be.a(\"string\");\r",
									"    pm.expect(procedure.updated_on).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Cleanup after all institutions are processed\r",
									"if (currentInstitutionIndex >= totalInstitutions) {\r",
									"    console.log(\"Domestic procedures retrieved for all institutions. Stopping further iteration.\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionIndex\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionId\");\r",
									"    pm.execution.setNextRequest(\"Get International Application Procedure\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the total number of institutions for which to get procedures\r",
									"const totalInstitutions = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"let currentInstitutionIndex = pm.collectionVariables.get(\"currentInstitutionIndex\") || 0;\r",
									"\r",
									"if (currentInstitutionIndex < totalInstitutions) {\r",
									"    // Retrieve the current institution ID based on the index\r",
									"    let currentInstitutionId = pm.collectionVariables.get(`institutionId${currentInstitutionIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentInstitutionId\", currentInstitutionId);\r",
									"\r",
									"    // Increment the index for the next iteration\r",
									"    pm.collectionVariables.set(\"currentInstitutionIndex\", currentInstitutionIndex + 1);\r",
									"\r",
									"    // Set next request to loop on the same request for the next institution\r",
									"    pm.execution.setNextRequest(\"Get Domestic Application Procedure\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{currentInstitutionId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "INSTITUTE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/application/api/v1/institute/{{currentInstitutionId}}/application/procedure/pageNumber/1/pageSize/50?status=ACTIVE&student_type=DOMESTIC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application",
								"api",
								"v1",
								"institute",
								"{{currentInstitutionId}}",
								"application",
								"procedure",
								"pageNumber",
								"1",
								"pageSize",
								"50"
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "student_type",
									"value": "DOMESTIC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get International Application Procedure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response data\r",
									"let jsonData = pm.response.json();\r",
									"let totalInstitutions = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"\r",
									"// Check response status\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verify response message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Procedure list retrieved successfully.\");\r",
									"});\r",
									"\r",
									"// Check that response data array is not empty\r",
									"pm.test(\"Response data array is not empty\", function () {\r",
									"    pm.expect(jsonData.data.response).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Store international procedure ID for the current institution\r",
									"let currentInstitutionIndex = pm.collectionVariables.get(\"currentInstitutionIndex\");\r",
									"let procedure = jsonData.data.response[0];\r",
									"pm.collectionVariables.set(`internationalProcedureId${currentInstitutionIndex}`, procedure.id);\r",
									"console.log(`International procedure ID for institution ${currentInstitutionIndex}: ${procedure.id}`);\r",
									"\r",
									"// Verify procedure details\r",
									"pm.test(\"Procedure details are correct\", function () {\r",
									"    pm.expect(procedure.id).to.be.a(\"string\");\r",
									"    pm.expect(procedure.name).to.eql(\"Generic International Application Procedure\");\r",
									"    pm.expect(procedure.entity_id).to.be.a(\"string\");\r",
									"    pm.expect(procedure.entity_type).to.eql(\"COURSE\");\r",
									"    pm.expect(procedure.student_type).to.eql(\"INTERNATIONAL\");\r",
									"    pm.expect(procedure.status).to.eql(\"ACTIVE\");\r",
									"});\r",
									"\r",
									"// Verify accessible_by data\r",
									"pm.test(\"Accessible by data is correct\", function () {\r",
									"    pm.expect(procedure.accessible_by.accessible_by_type).to.eql(\"ONLY_ME\");\r",
									"    pm.expect(procedure.accessible_by.accessible_by).to.be.an(\"array\").with.lengthOf(1);\r",
									"});\r",
									"\r",
									"// Verify procedure steps\r",
									"pm.test(\"Procedure steps are correct\", function () {\r",
									"    pm.expect(procedure.procedure_steps).to.be.an(\"array\").with.lengthOf(5);\r",
									"    procedure.procedure_steps.forEach((step, index) => {\r",
									"        pm.expect(step.procedure_step_id).to.be.a(\"string\");\r",
									"        pm.expect(step.step_order).to.eql(index + 1);\r",
									"        pm.expect(step.status).to.be.a(\"boolean\");\r",
									"        if (step.properties) {\r",
									"            pm.expect(step.properties).to.be.an(\"object\");\r",
									"            if (step.properties.NO_OF_DAYS) {\r",
									"                pm.expect(step.properties.NO_OF_DAYS).to.match(/^\\d+$/);\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"// Check timestamps for creation and update\r",
									"pm.test(\"Created and updated timestamps are present\", function () {\r",
									"    pm.expect(procedure.created_on).to.be.a(\"string\");\r",
									"    pm.expect(procedure.updated_on).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Cleanup after all institutions are processed\r",
									"if (currentInstitutionIndex >= totalInstitutions) {\r",
									"    console.log(\"International procedures retrieved for all institutions. Stopping further iteration.\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionIndex\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionId\");\r",
									"    pm.execution.setNextRequest(\"Add Application Procedure\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the total number of institutions for which to get procedures\r",
									"const totalInstitutions = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"let currentInstitutionIndex = pm.collectionVariables.get(\"currentInstitutionIndex\") || 0;\r",
									"\r",
									"if (currentInstitutionIndex < totalInstitutions) {\r",
									"    // Retrieve the current institution ID based on the index\r",
									"    let currentInstitutionId = pm.collectionVariables.get(`institutionId${currentInstitutionIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentInstitutionId\", currentInstitutionId);\r",
									"\r",
									"    // Increment the index for the next iteration\r",
									"    pm.collectionVariables.set(\"currentInstitutionIndex\", currentInstitutionIndex + 1);\r",
									"\r",
									"    // Set next request to loop on the same request for the next institution\r",
									"    pm.execution.setNextRequest(\"Get International Application Procedure\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{currentInstitutionId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "INSTITUTE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/application/api/v1/institute/{{currentInstitutionId}}/application/procedure/pageNumber/1/pageSize/50?status=ACTIVE&student_type=INTERNATIONAL",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application",
								"api",
								"v1",
								"institute",
								"{{currentInstitutionId}}",
								"application",
								"procedure",
								"pageNumber",
								"1",
								"pageSize",
								"50"
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "student_type",
									"value": "INTERNATIONAL"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Application Procedure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response data\r",
									"let jsonData = pm.response.json();\r",
									"let totalCourses = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"\r",
									"// Check response status\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check message indicates success\r",
									"pm.test(\"Message indicates success\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"course.application.procudure.add.update\");\r",
									"});\r",
									"\r",
									"// Log confirmation for tracking\r",
									"console.log(`Application procedure added for course ID: ${pm.collectionVariables.get(\"currentCourseId\")}`);\r",
									"\r",
									"// Retrieve the current course index and total number of courses\r",
									"let currentCourseIndex = pm.collectionVariables.get(\"currentCourseIndex\");\r",
									"\r",
									"// Cleanup after all courses are processed\r",
									"if (currentCourseIndex >= totalCourses) {\r",
									"    console.log(\"Application procedures added for all courses. Stopping further iteration.\");\r",
									"    pm.collectionVariables.unset(\"currentCourseIndex\");\r",
									"    pm.collectionVariables.unset(\"currentCourseId\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionId\");\r",
									"    pm.collectionVariables.unset(\"domesticProcedureId\");\r",
									"    pm.collectionVariables.unset(\"internationalProcedureId\");\r",
									"    pm.execution.setNextRequest(\"Update Course Status\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the total number of courses\r",
									"const totalCourses = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"let currentCourseIndex = pm.collectionVariables.get(\"currentCourseIndex\") || 0;\r",
									"\r",
									"if (currentCourseIndex < totalCourses) {\r",
									"    // Get the course ID and procedure IDs for the current course\r",
									"    const currentCourseId = pm.collectionVariables.get(`courseId${currentCourseIndex + 1}`);\r",
									"    const domesticProcedureId = pm.collectionVariables.get(`domesticProcedureId${currentCourseIndex + 1}`);\r",
									"    const internationalProcedureId = pm.collectionVariables.get(`internationalProcedureId${currentCourseIndex + 1}`);\r",
									"    \r",
									"    let currentInstitutionId = pm.collectionVariables.get(`institutionId${currentCourseIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentInstitutionId\", currentInstitutionId);\r",
									"    \r",
									"    // Set variables for the request body\r",
									"    pm.collectionVariables.set(\"currentCourseId\", currentCourseId);\r",
									"    pm.collectionVariables.set(\"domesticProcedureId\", domesticProcedureId);\r",
									"    pm.collectionVariables.set(\"internationalProcedureId\", internationalProcedureId);\r",
									"\r",
									"    // Update the request body\r",
									"    pm.request.body.raw = JSON.stringify({\r",
									"        \"domestic_student_procedure_id\": domesticProcedureId,\r",
									"        \"international_student_procedure_id\": internationalProcedureId\r",
									"    });\r",
									"\r",
									"    // Increment the course index for the next iteration\r",
									"    pm.collectionVariables.set(\"currentCourseIndex\", currentCourseIndex + 1);\r",
									"\r",
									"    // Set the request to repeat until all courses are processed\r",
									"    pm.execution.setNextRequest(\"Add Application Procedure\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{currentInstitutionId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "INSTITUTE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"domestic_student_procedure_id\": \"{{domesticProcedureId}}\",\r\n    \"international_student_procedure_id\": \"{{internationalProcedureId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/institute/api/v1/course/{{currentCourseId}}/application_procedure",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"institute",
								"api",
								"v1",
								"course",
								"{{currentCourseId}}",
								"application_procedure"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Course Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response data\r",
									"let jsonData = pm.response.json();\r",
									"const totalCourses = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"\r",
									"// Check response status\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check that the message indicates success\r",
									"pm.test(\"Message indicates success\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"course status changed successfully\");\r",
									"});\r",
									"\r",
									"// Log confirmation for tracking\r",
									"console.log(`Course status changed for course ID: ${pm.collectionVariables.get(\"currentCourseId\")}`);\r",
									"\r",
									"// Retrieve the current course index and total number of courses\r",
									"let currentCourseIndex = pm.collectionVariables.get(\"currentCourseIndex\");\r",
									"\r",
									"// Cleanup after all courses are processed\r",
									"if (currentCourseIndex >= totalCourses) {\r",
									"    console.log(\"Course status changed for all courses. Stopping further iteration.\");\r",
									"    pm.collectionVariables.unset(\"currentCourseIndex\");\r",
									"    pm.collectionVariables.unset(\"currentCourseId\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionId\");\r",
									"    pm.execution.setNextRequest(\"Create RMO Application\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the total number of courses\r",
									"const totalCourses = pm.collectionVariables.get(\"totalInstitutions\");\r",
									"let currentCourseIndex = pm.collectionVariables.get(\"currentCourseIndex\") || 0;\r",
									"\r",
									"if (currentCourseIndex < totalCourses) {\r",
									"    // Set up the current course and institution IDs based on index\r",
									"    const currentCourseId = pm.collectionVariables.get(`courseId${currentCourseIndex + 1}`);\r",
									"    const currentInstitutionId = pm.collectionVariables.get(`institutionId${currentCourseIndex + 1}`);\r",
									"    \r",
									"    // Set these values for the request\r",
									"    pm.collectionVariables.set(\"currentCourseId\", currentCourseId);\r",
									"    pm.collectionVariables.set(\"currentInstitutionId\", currentInstitutionId);\r",
									"    \r",
									"    // Increment the course index for the next iteration\r",
									"    pm.collectionVariables.set(\"currentCourseIndex\", currentCourseIndex + 1);\r",
									"    \r",
									"    // Set the request to repeat for each course\r",
									"    pm.execution.setNextRequest(\"Update Course Status\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{currentInstitutionId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "INSTITUTE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/institute/api/v1/course/status/{{currentCourseId}}?status=ACTIVE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"institute",
								"api",
								"v1",
								"course",
								"status",
								"{{currentCourseId}}"
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4 - Submit RMOs",
			"item": [
				{
					"name": "Create RMO Application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define the total number of applications to create\r",
									"const totalApplications = pm.collectionVariables.get(\"totalApplications\");\r",
									"let currentApplicationIndex = pm.collectionVariables.get(\"currentApplicationIndex\") || 0;\r",
									"\r",
									"if (currentApplicationIndex < totalApplications) {\r",
									"    // Set the current application ID variable for later use\r",
									"    pm.collectionVariables.set(\"currentApplicationId\", `rmoApplicationId${currentApplicationIndex + 1}`);\r",
									"\r",
									"    // Increment the index for the next iteration\r",
									"    pm.collectionVariables.set(\"currentApplicationIndex\", currentApplicationIndex + 1);\r",
									"\r",
									"    // Set the next request to loop on the same request for the next application\r",
									"    pm.execution.setNextRequest(\"Create RMO Application\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response\r",
									"let jsonData = pm.response.json();\r",
									"const totalApplications = pm.collectionVariables.get(\"totalApplications\");\r",
									"\r",
									"// Check if the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verify response message\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"User application created successfully.\");\r",
									"});\r",
									"\r",
									"// Check if the main data structure is present\r",
									"pm.test(\"Data object is present\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"// Store the application ID as a collection variable\r",
									"let currentApplicationIndex = pm.collectionVariables.get(\"currentApplicationIndex\") - 1;\r",
									"pm.collectionVariables.set(`rmoApplicationId${currentApplicationIndex + 1}`, jsonData.data.id); \r",
									"\r",
									"// Verify main application details\r",
									"pm.test(\"Application details are correct\", function () {\r",
									"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.readable_id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.type).to.eql(\"RECEIVE_OFFERS\");\r",
									"    pm.expect(jsonData.data.status).to.eql(\"DRAFT\");\r",
									"    pm.expect(jsonData.data.applicant_id).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Verify applicant details\r",
									"const applicantDetails = jsonData.data.applicant_details;\r",
									"pm.test(\"Applicant details are correct\", function () {\r",
									"    pm.expect(applicantDetails).to.be.an(\"object\");\r",
									"    pm.expect(applicantDetails.user_id).to.be.a(\"string\");\r",
									"    pm.expect(applicantDetails.first_name).to.be.a(\"string\");\r",
									"    pm.expect(applicantDetails.last_name).to.be.a(\"string\");\r",
									"    pm.expect(applicantDetails.email).to.be.a(\"string\");\r",
									"    pm.expect(applicantDetails.dob).to.be.a(\"string\");\r",
									"    pm.expect(applicantDetails.gender).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Verify created and updated timestamps\r",
									"pm.test(\"Created and updated timestamps are correct\", function () {\r",
									"    pm.expect(jsonData.data.created_on).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.data.updated_on).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check intake date structure\r",
									"const intakeDate = jsonData.data.intake_date[0];\r",
									"pm.test(\"Intake date is present and structured correctly\", function () {\r",
									"    pm.expect(intakeDate).to.be.an(\"object\");\r",
									"    pm.expect(intakeDate.date).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Log confirmation for tracking\r",
									"let currentApplicationIdValue = pm.collectionVariables.get(`rmoApplicationId${currentApplicationIndex + 1}`);\r",
									"console.log(`Creating RMO Application ${currentApplicationIndex + 1}: ${currentApplicationIdValue}`);\r",
									"\r",
									"// Cleanup after all applications are processed\r",
									"if (currentApplicationIndex + 1 >= totalApplications) {\r",
									"    console.log(\"Applications created successfully for all entries. Stopping further iteration.\");\r",
									"    pm.collectionVariables.unset(\"currentApplicationIndex\");\r",
									"    pm.collectionVariables.unset(\"currentApplicationId\");\r",
									"    pm.execution.setNextRequest(\"Submit RMO Application\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{applicantLoginToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "UserId",
								"value": "{{applicantId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{applicantId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "USER",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"applicant_requires_special_needs\": false,\r\n  \"application_id\": null,\r\n  \"application_type\": \"UNDERGRADUATE\",\r\n  \"applying_for_type\": \"MY_SELF\",\r\n  \"boarding\": null,\r\n  \"course_id\": \"\",\r\n  \"course_name\": null,\r\n  \"currently_working\": null,\r\n  \"curriculum\": null,\r\n  \"date_of_entry\": null,\r\n  \"delivery_mode\": [\"{{deliveryType}}\"],\r\n  \"description_preferences\": \"\",\r\n  \"education_details\": null,\r\n  \"family_member_id\": null,\r\n  \"gender\": null,\r\n  \"institute_id\": \"\",\r\n  \"intake_date\": [\r\n    {\r\n      \"intake_date_type\": \"FIXED\",\r\n      \"start_date\": null,\r\n      \"end_date\": null,\r\n      \"date\": \"{{startDate}}\"\r\n    }\r\n  ],\r\n  \"is_my_child_requires_special_needs\": false,\r\n  \"keywords\": [\"Bachelor of Computer Science\"],\r\n  \"levels\": [\"Undergraduate\"],\r\n  \"preferred_locations\": [\r\n    {\r\n      \"latitude\": \"-35.2777\",\r\n      \"longitude\": \"149.1189\",\r\n      \"city\": \"Australian National University\",\r\n      \"state\": \"ACT\",\r\n      \"country\": \"Australia\"\r\n    }\r\n  ],\r\n  \"religion\": null,\r\n  \"rpl_education\": null,\r\n  \"source_user_education\": null,\r\n  \"source_user_education_id\": null,\r\n  \"student_type\": null,\r\n  \"study_mode\": [\"{{studyType}}\"],\r\n  \"study_time\": null,\r\n  \"type\": \"RECEIVE_OFFERS\",\r\n  \"why_interested\": \"{{$randomLoremSentence}} {{$randomLoremSentence}}\",\r\n  \"why_would_you_like_to_upskill\": null\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/application/api/v1/user/application",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application",
								"api",
								"v1",
								"user",
								"application"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit RMO Application",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get total number of applications and the current application index\r",
									"const totalApplications = pm.collectionVariables.get(\"totalApplications\");\r",
									"let currentApplicationIndex = pm.collectionVariables.get(\"currentApplicationIndex\") || 0;\r",
									"\r",
									"if (currentApplicationIndex < totalApplications) {\r",
									"    // Set the current application ID for this iteration\r",
									"    const currentRmoApplicationId = pm.collectionVariables.get(`rmoApplicationId${currentApplicationIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentRmoApplicationId\", currentRmoApplicationId);\r",
									"    \r",
									"    // Log the current application ID for tracking\r",
									"    console.log(`Submitting RMO Application ${currentApplicationIndex + 1}: ${currentRmoApplicationId}`);\r",
									"    \r",
									"    // Set the next request to loop back to this same endpoint\r",
									"    pm.execution.setNextRequest(\"Submit RMO Application\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if current application was processed successfully\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Move to the next application\r",
									"let currentApplicationIndex = pm.collectionVariables.get(\"currentApplicationIndex\") || 0;\r",
									"currentApplicationIndex++;\r",
									"pm.collectionVariables.set(\"currentApplicationIndex\", currentApplicationIndex);\r",
									"\r",
									"// Check if all applications have been processed\r",
									"const totalApplications = pm.collectionVariables.get(\"totalApplications\");\r",
									"if (currentApplicationIndex >= totalApplications) {\r",
									"    console.log(\"All applications submitted successfully. Stopping further iterations.\");\r",
									"    \r",
									"    // Cleanup variables and stop further requests\r",
									"    pm.collectionVariables.unset(\"currentApplicationIndex\");\r",
									"    pm.collectionVariables.unset(\"currentRmoApplicationId\");\r",
									"    pm.execution.setNextRequest(\"Approve RMO Application\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{applicantLoginToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "UserId",
								"value": "{{applicantId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{applicantId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "USER",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"is_apprenticeship_application\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/application/api/v1/user/application/{{currentRmoApplicationId}}/submit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application",
								"api",
								"v1",
								"user",
								"application",
								"{{currentRmoApplicationId}}",
								"submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve RMO Application",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Check response status\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check message is correct\r",
									"pm.test(\"Message indicates success\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Approve/Reject User application by admin successfully.\");\r",
									"});\r",
									"\r",
									"// Move to the next application\r",
									"let currentApplicationIndex = pm.collectionVariables.get(\"currentApplicationIndex\") || 0;\r",
									"currentApplicationIndex++;\r",
									"pm.collectionVariables.set(\"currentApplicationIndex\", currentApplicationIndex);\r",
									"\r",
									"// Check if all applications have been processed\r",
									"const totalApplications = pm.collectionVariables.get(\"totalApplications\");\r",
									"if (currentApplicationIndex >= totalApplications) {\r",
									"    console.log(\"All applications approved successfully. Stopping further iterations.\");\r",
									"    \r",
									"    // Cleanup variables and stop further requests\r",
									"    pm.collectionVariables.unset(\"currentApplicationIndex\");\r",
									"    pm.collectionVariables.unset(\"currentRmoApplicationId\");\r",
									"    pm.execution.setNextRequest(\"Create Offer\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get total number of applications and the current application index\r",
									"const totalApplications = pm.collectionVariables.get(\"totalApplications\");\r",
									"let currentApplicationIndex = pm.collectionVariables.get(\"currentApplicationIndex\") || 0;\r",
									"\r",
									"if (currentApplicationIndex < totalApplications) {\r",
									"    // Set the current application ID for this iteration\r",
									"    const currentRmoApplicationId = pm.collectionVariables.get(`rmoApplicationId${currentApplicationIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentRmoApplicationId\", currentRmoApplicationId);\r",
									"    \r",
									"    // Log the current application ID for tracking\r",
									"    console.log(`Approving RMO Application ${currentApplicationIndex + 1}: ${currentRmoApplicationId}`);\r",
									"    \r",
									"    // Set the next request to loop back to this same endpoint\r",
									"    pm.execution.setNextRequest(\"Approve RMO Application\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminLoginToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "UserId",
								"value": "{{adminId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/application/api/v1/admin/user/application/id/{{currentRmoApplicationId}}/approve_application/status/APPROVED_BY_ADMIN",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application",
								"api",
								"v1",
								"admin",
								"user",
								"application",
								"id",
								"{{currentRmoApplicationId}}",
								"approve_application",
								"status",
								"APPROVED_BY_ADMIN"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5 - Make Offers",
			"item": [
				{
					"name": "Create Offer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Initialize the current offer index and total counts at the beginning\r",
									"let currentOfferIndex = pm.collectionVariables.get(\"currentOfferIndex\") || 0;\r",
									"const totalApplications = pm.collectionVariables.get(\"totalApplications\");\r",
									"const totalOffers = pm.collectionVariables.get(\"totalOffers\");\r",
									"\r",
									"// Retrieve the list of all application IDs and selected offer IDs\r",
									"const applicationIds = Array.from({ length: totalApplications }, (_, i) => pm.collectionVariables.get(`rmoApplicationId${i + 1}`));\r",
									"let offerApplicationIds = pm.collectionVariables.get(\"offerApplicationIds\") ? JSON.parse(pm.collectionVariables.get(\"offerApplicationIds\")) : [];\r",
									"\r",
									"// Set the institution and course IDs based on the current offer index\r",
									"let currentInstitutionId = pm.collectionVariables.get(`institutionId${currentOfferIndex + 1}`);\r",
									"let currentCourseId = pm.collectionVariables.get(`courseId${currentOfferIndex + 1}`);\r",
									"pm.collectionVariables.set(\"currentInstitutionId\", currentInstitutionId);\r",
									"pm.collectionVariables.set(\"currentCourseId\", currentCourseId);\r",
									"\r",
									"// Randomly select unique application IDs for offers if not already done\r",
									"if (offerApplicationIds.length === 0) {\r",
									"    while (offerApplicationIds.length < totalOffers) {\r",
									"        const randomIndex = Math.floor(Math.random() * applicationIds.length);\r",
									"        const randomAppId = applicationIds[randomIndex];\r",
									"        \r",
									"        // Add only unique application IDs\r",
									"        if (!offerApplicationIds.includes(randomAppId)) {\r",
									"            offerApplicationIds.push(randomAppId);\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    // Store the selected application IDs for offers in a collection variable\r",
									"    pm.collectionVariables.set(\"offerApplicationIds\", JSON.stringify(offerApplicationIds));\r",
									"}\r",
									"\r",
									"// Check if the current offer index is less than the total number of offers\r",
									"if (currentOfferIndex < offerApplicationIds.length) {\r",
									"    const applicationId = offerApplicationIds[currentOfferIndex];\r",
									"    const applicationVariableName = `rmoApplicationId${applicationIds.indexOf(applicationId) + 1}`;\r",
									"    pm.collectionVariables.set(\"currentRmoApplicationId\", applicationId);\r",
									"    \r",
									"    // Update the start date for the offer\r",
									"    let startDate = pm.collectionVariables.get(\"startDate\");\r",
									"    let newDate = new Date(startDate);\r",
									"    newDate.setDate(newDate.getDate() + 1);\r",
									"    let courseStartDate = newDate.toISOString().split('T')[0];\r",
									"    pm.collectionVariables.set(\"courseStartDate\", courseStartDate);\r",
									"    \r",
									"    // Log both the variable name and its actual application ID value\r",
									"    console.log(`Creating offer for Application ${currentOfferIndex + 1}: ${applicationVariableName}, ID ${applicationId}, Institution ID ${currentInstitutionId}, Course ID ${currentCourseId}`);\r",
									"    \r",
									"    // Increment the offer index for the next iteration\r",
									"    pm.collectionVariables.set(\"currentOfferIndex\", currentOfferIndex + 1);\r",
									"    \r",
									"    // Set the next request to loop back to this offer creation endpoint\r",
									"    pm.execution.setNextRequest(\"Create Offer\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let currentOfferIndex = pm.collectionVariables.get(\"currentOfferIndex\") || 0;\r",
									"\r",
									"// Parse the response and check if status code is 200\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verify success message\r",
									"pm.test(\"Message indicates success\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"offer created successfully.\");\r",
									"});\r",
									"\r",
									"// Save the created offer ID\r",
									"pm.collectionVariables.set(`rmoOfferId${currentOfferIndex}`, jsonData.data.id);\r",
									"\r",
									"// If all offers are processed, clear variables and stop the iteration\r",
									"const totalOffers = pm.collectionVariables.get(\"totalOffers\");\r",
									"if (currentOfferIndex >= totalOffers) {\r",
									"    console.log(\"All offers created successfully. Stopping further iterations.\");\r",
									"    pm.collectionVariables.unset(\"currentOfferIndex\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionId\");\r",
									"    pm.collectionVariables.unset(\"currentCourseId\");\r",
									"    pm.execution.setNextRequest(\"Submit Offer\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{currentInstitutionId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "INSTITUTE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applicant_approval_deadline\": null,\r\n    \"campus\": \"\",\r\n    \"course_id\": \"{{currentCourseId}}\",\r\n    \"course_start_date\": \"{{courseStartDate}}\",\r\n    \"date_of_entry\": null,\r\n    \"delivery_type\": \"ONLINE\",\r\n    \"description\": \"{{$randomLoremSentence}} {{$randomLoremSentence}}\",\r\n    \"faculty_id\": \"3ed56433-1a16-44ce-a23c-862032a91aa5\",\r\n    \"institute_id\": \"{{currentInstitutionId}}\",\r\n    \"intake\": {\r\n        \"start_date\": \"{{startDate}}\",\r\n        \"end_date\": \"{{endDate}}\",\r\n        \"date\": null,\r\n        \"intake_date_type\": \"ROLLING\"\r\n    },\r\n    \"start_date\": \"{{startDate}}\",\r\n    \"pre_orientation_review_date\": \"{{startDate}}\",\r\n    \"study_mode\": \"PART_TIME\",\r\n    \"user_application_id\": \"{{currentRmoApplicationId}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/application/api/v1/user/{{applicantId}}/offer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application",
								"api",
								"v1",
								"user",
								"{{applicantId}}",
								"offer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit Offer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Initialize the current offer index\r",
									"let currentOfferIndex = pm.collectionVariables.get(\"currentOfferIndex\") || 0;\r",
									"const totalOffers = pm.collectionVariables.get(\"totalOffers\");\r",
									"const offerApplicationIds = JSON.parse(pm.collectionVariables.get(\"offerApplicationIds\") || \"[]\");\r",
									"\r",
									"if (currentOfferIndex < totalOffers && currentOfferIndex < offerApplicationIds.length) {\r",
									"    const currentRmoOfferId = pm.collectionVariables.get(`rmoOfferId${currentOfferIndex + 1}`);\r",
									"    const currentApplicationId = offerApplicationIds[currentOfferIndex];\r",
									"    \r",
									"    pm.collectionVariables.set(\"currentApplicationId\", currentApplicationId);\r",
									"\r",
									"    let currentInstitutionId = pm.collectionVariables.get(`institutionId${currentOfferIndex + 1}`);\r",
									"    \r",
									"    pm.collectionVariables.set(\"currentInstitutionId\", currentInstitutionId);\r",
									"    pm.collectionVariables.set(\"currentRmoOfferId\", currentRmoOfferId);\r",
									"\r",
									"    console.log(`Preparing to submit Offer ID: ${currentRmoOfferId} for Application ID: ${currentApplicationId}`);\r",
									"    \r",
									"    pm.collectionVariables.set(\"currentOfferIndex\", currentOfferIndex + 1);\r",
									"    pm.execution.setNextRequest(\"Submit Offer\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Check response status\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check that the message indicates success\r",
									"pm.test(\"Message indicates success\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Offer submitted successfully.\");\r",
									"});\r",
									"\r",
									"// Log confirmation for tracking\r",
									"console.log(`Offer submitted for ID: ${pm.collectionVariables.get(\"currentRmoOfferId\")}`);\r",
									"\r",
									"// Retrieve the current offer index and total number of offers\r",
									"let currentOfferIndex = pm.collectionVariables.get(\"currentOfferIndex\");\r",
									"const totalOffers = pm.collectionVariables.get(\"totalOffers\");\r",
									"\r",
									"// Cleanup after all offers are processed\r",
									"if (currentOfferIndex >= totalOffers) {\r",
									"    console.log(\"All offers submitted successfully. Stopping further iterations.\");\r",
									"    pm.collectionVariables.unset(\"currentOfferIndex\");\r",
									"    pm.collectionVariables.unset(\"currentRmoOfferId\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionId\");\r",
									"    pm.collectionVariables.unset(\"currentApplicationId\");\r",
									"    pm.execution.setNextRequest(\"Accept Offer\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{currentInstitutionId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "INSTITUTE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/application/api/v1/user/offer/{{currentRmoOfferId}}/submit_offer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application",
								"api",
								"v1",
								"user",
								"offer",
								"{{currentRmoOfferId}}",
								"submit_offer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept Offer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Initialize the current offer index\r",
									"let currentOfferIndex = pm.collectionVariables.get(\"currentOfferIndex\") || 0;\r",
									"const totalOffers = pm.collectionVariables.get(\"totalOffers\");\r",
									"\r",
									"if (currentOfferIndex < totalOffers) {\r",
									"    const currentRmoOfferId = pm.collectionVariables.get(`rmoOfferId${currentOfferIndex + 1}`);\r",
									"    pm.collectionVariables.set(\"currentRmoOfferId\", currentRmoOfferId);\r",
									"    pm.collectionVariables.set(\"currentOfferIndex\", currentOfferIndex + 1);\r",
									"    pm.execution.setNextRequest(\"Accept Offer\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Check response status\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check that the message indicates success\r",
									"pm.test(\"Message indicates success\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"Offer interested status updated successfully.\");\r",
									"});\r",
									"\r",
									"// Log confirmation for tracking\r",
									"console.log(`Status updated for Offer ID: ${pm.collectionVariables.get(\"currentRmoOfferId\")}`);\r",
									"\r",
									"// Retrieve the current offer index and total number of offers\r",
									"let currentOfferIndex = pm.collectionVariables.get(\"currentOfferIndex\");\r",
									"const totalOffers = pm.collectionVariables.get(\"totalOffers\");\r",
									"\r",
									"// Cleanup after all offers are processed\r",
									"if (currentOfferIndex >= totalOffers) {\r",
									"    console.log(\"All offers accepted successfully. Stopping further iterations.\");\r",
									"    pm.collectionVariables.unset(\"currentRmoOfferId\");\r",
									"    pm.collectionVariables.unset(\"currentOfferIndex\");\r",
									"    pm.execution.setNextRequest(\"Enroll\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{applicantLoginToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "UserId",
								"value": "{{applicantId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{applicantId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "USER",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/application/api/v1/user/offer/{{currentRmoOfferId}}/status/ACCEPT/interested",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application",
								"api",
								"v1",
								"user",
								"offer",
								"{{currentRmoOfferId}}",
								"status",
								"ACCEPT",
								"interested"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enroll",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Initialize the current application index\r",
									"let currentApplicationIndex = pm.collectionVariables.get(\"currentApplicationIndex\") || 0;\r",
									"const offerApplicationIds = JSON.parse(pm.collectionVariables.get(\"offerApplicationIds\"));\r",
									"const totalApplications = offerApplicationIds.length;\r",
									"\r",
									"if (currentApplicationIndex < totalApplications) {\r",
									"    const currentRmoApplicationId = offerApplicationIds[currentApplicationIndex];\r",
									"\r",
									"    pm.collectionVariables.set(\"currentRmoApplicationId\", currentRmoApplicationId);\r",
									"\r",
									"    console.log(`Preparing to complete enrollment for Application ID: ${currentRmoApplicationId}`);\r",
									"\r",
									"    pm.collectionVariables.set(\"currentApplicationIndex\", currentApplicationIndex + 1);\r",
									"    pm.execution.setNextRequest(\"Enroll\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response data\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Check response status\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check that the message indicates success\r",
									"pm.test(\"Message indicates success\", function () {\r",
									"    pm.expect(jsonData.message).to.eql(\"User Application Complete Environment task completed successfully.\");\r",
									"});\r",
									"\r",
									"// Log confirmation for tracking\r",
									"console.log(`Enrollment completed for Application ID: ${pm.collectionVariables.get(\"currentRmoApplicationId\")}`);\r",
									"\r",
									"// Retrieve the current application index and total number of applications\r",
									"let currentApplicationIndex = pm.collectionVariables.get(\"currentApplicationIndex\");\r",
									"const totalApplications = pm.collectionVariables.get(\"totalOffers\");\r",
									"\r",
									"// Cleanup after all applications are processed\r",
									"if (currentApplicationIndex >= totalApplications) {\r",
									"    console.log(\"All applications completed enrollment successfully. Stopping further iterations.\");\r",
									"    pm.collectionVariables.unset(\"currentRmoApplicationId\");\r",
									"    pm.collectionVariables.unset(\"currentApplicationIndex\");\r",
									"    pm.collectionVariables.unset(\"currentInstitutionId\");\r",
									"    pm.collectionVariables.unset(\"offerApplicationIds\");\r",
									"    pm.collectionVariables.unset(\"startDate\");\r",
									"    pm.collectionVariables.unset(\"endDate\");\r",
									"    pm.collectionVariables.unset(\"courseStartDate\");\r",
									"    pm.execution.setNextRequest(null);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{loginToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "UserId",
								"value": "{{institutionOwnerId}}",
								"type": "text"
							},
							{
								"key": "EntityId",
								"value": "{{currentInstitutionId}}",
								"type": "text"
							},
							{
								"key": "EntityType",
								"value": "INSTITUTE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/application/api/v1/workflow/user/application/{{currentRmoApplicationId}}/complete_enrollment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application",
								"api",
								"v1",
								"workflow",
								"user",
								"application",
								"{{currentRmoApplicationId}}",
								"complete_enrollment"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://auth.yuzee.click",
			"type": "string"
		},
		{
			"key": "institutionOwnerEmail",
			"value": "yusuprejepov2002@gmail.com",
			"type": "string"
		},
		{
			"key": "applicantEmail",
			"value": "user_pasd9kqp@xfqbhgyl.mailosaur.net",
			"type": "string"
		},
		{
			"key": "adminEmail",
			"value": "ado@yuzee.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "@kxIKN8bm",
			"type": "string"
		},
		{
			"key": "adminPassword",
			"value": "fy%@bed-dAhbu7-xakfo#",
			"type": "string"
		},
		{
			"key": "institutionOwnerId",
			"value": "fb483982-b578-4b60-adb1-dbf6adbba4b4",
			"type": "string"
		},
		{
			"key": "applicantId",
			"value": "43a1c2e8-3e24-4eb2-99a7-32edd0c1945e",
			"type": "string"
		},
		{
			"key": "adminId",
			"value": "bba3b667-70f5-4472-af95-46de8c8745aa",
			"type": "string"
		},
		{
			"key": "totalInstitutions",
			"value": "10",
			"type": "string"
		},
		{
			"key": "totalApplications",
			"value": "20",
			"type": "string"
		},
		{
			"key": "totalOffers",
			"value": "10",
			"type": "string"
		},
		{
			"key": "loginToken",
			"value": ""
		},
		{
			"key": "applicantLoginToken",
			"value": ""
		},
		{
			"key": "adminLoginToken",
			"value": ""
		},
		{
			"key": "institutionName1",
			"value": ""
		},
		{
			"key": "institutionReadableId1",
			"value": ""
		},
		{
			"key": "institutionId1",
			"value": ""
		},
		{
			"key": "institutionName2",
			"value": ""
		},
		{
			"key": "institutionReadableId2",
			"value": ""
		},
		{
			"key": "institutionId2",
			"value": ""
		},
		{
			"key": "institutionName3",
			"value": ""
		},
		{
			"key": "institutionReadableId3",
			"value": ""
		},
		{
			"key": "institutionId3",
			"value": ""
		},
		{
			"key": "institutionName4",
			"value": ""
		},
		{
			"key": "institutionReadableId4",
			"value": ""
		},
		{
			"key": "institutionId4",
			"value": ""
		},
		{
			"key": "institutionName5",
			"value": ""
		},
		{
			"key": "institutionReadableId5",
			"value": ""
		},
		{
			"key": "institutionId5",
			"value": ""
		},
		{
			"key": "institutionName6",
			"value": ""
		},
		{
			"key": "institutionReadableId6",
			"value": ""
		},
		{
			"key": "institutionId6",
			"value": ""
		},
		{
			"key": "institutionName7",
			"value": ""
		},
		{
			"key": "institutionReadableId7",
			"value": ""
		},
		{
			"key": "institutionId7",
			"value": ""
		},
		{
			"key": "institutionName8",
			"value": ""
		},
		{
			"key": "institutionReadableId8",
			"value": ""
		},
		{
			"key": "institutionId8",
			"value": ""
		},
		{
			"key": "institutionName9",
			"value": ""
		},
		{
			"key": "institutionReadableId9",
			"value": ""
		},
		{
			"key": "institutionId9",
			"value": ""
		},
		{
			"key": "institutionName10",
			"value": ""
		},
		{
			"key": "institutionReadableId10",
			"value": ""
		},
		{
			"key": "institutionId10",
			"value": ""
		},
		{
			"key": "courseId1",
			"value": ""
		},
		{
			"key": "courseId2",
			"value": ""
		},
		{
			"key": "courseId3",
			"value": ""
		},
		{
			"key": "courseId4",
			"value": ""
		},
		{
			"key": "courseId5",
			"value": ""
		},
		{
			"key": "courseId6",
			"value": ""
		},
		{
			"key": "courseId7",
			"value": ""
		},
		{
			"key": "courseId8",
			"value": ""
		},
		{
			"key": "courseId9",
			"value": ""
		},
		{
			"key": "courseId10",
			"value": ""
		},
		{
			"key": "domesticProcedureId1",
			"value": ""
		},
		{
			"key": "domesticProcedureId2",
			"value": ""
		},
		{
			"key": "domesticProcedureId3",
			"value": ""
		},
		{
			"key": "domesticProcedureId4",
			"value": ""
		},
		{
			"key": "domesticProcedureId5",
			"value": ""
		},
		{
			"key": "domesticProcedureId6",
			"value": ""
		},
		{
			"key": "domesticProcedureId7",
			"value": ""
		},
		{
			"key": "domesticProcedureId8",
			"value": ""
		},
		{
			"key": "domesticProcedureId9",
			"value": ""
		},
		{
			"key": "domesticProcedureId10",
			"value": ""
		},
		{
			"key": "internationalProcedureId1",
			"value": ""
		},
		{
			"key": "internationalProcedureId2",
			"value": ""
		},
		{
			"key": "internationalProcedureId3",
			"value": ""
		},
		{
			"key": "internationalProcedureId4",
			"value": ""
		},
		{
			"key": "internationalProcedureId5",
			"value": ""
		},
		{
			"key": "internationalProcedureId6",
			"value": ""
		},
		{
			"key": "internationalProcedureId7",
			"value": ""
		},
		{
			"key": "internationalProcedureId8",
			"value": ""
		},
		{
			"key": "internationalProcedureId9",
			"value": ""
		},
		{
			"key": "internationalProcedureId10",
			"value": ""
		},
		{
			"key": "rmoApplicationId1",
			"value": ""
		},
		{
			"key": "rmoApplicationId2",
			"value": ""
		},
		{
			"key": "rmoApplicationId3",
			"value": ""
		},
		{
			"key": "rmoApplicationId4",
			"value": ""
		},
		{
			"key": "rmoApplicationId5",
			"value": ""
		},
		{
			"key": "rmoApplicationId6",
			"value": ""
		},
		{
			"key": "rmoApplicationId7",
			"value": ""
		},
		{
			"key": "rmoApplicationId8",
			"value": ""
		},
		{
			"key": "rmoApplicationId9",
			"value": ""
		},
		{
			"key": "rmoApplicationId10",
			"value": ""
		},
		{
			"key": "rmoApplicationId11",
			"value": ""
		},
		{
			"key": "rmoApplicationId12",
			"value": ""
		},
		{
			"key": "rmoApplicationId13",
			"value": ""
		},
		{
			"key": "rmoApplicationId14",
			"value": ""
		},
		{
			"key": "rmoApplicationId15",
			"value": ""
		},
		{
			"key": "rmoApplicationId16",
			"value": ""
		},
		{
			"key": "rmoApplicationId17",
			"value": ""
		},
		{
			"key": "rmoApplicationId18",
			"value": ""
		},
		{
			"key": "rmoApplicationId19",
			"value": ""
		},
		{
			"key": "rmoApplicationId20",
			"value": ""
		},
		{
			"key": "rmoOfferId1",
			"value": ""
		},
		{
			"key": "rmoOfferId2",
			"value": ""
		},
		{
			"key": "rmoOfferId3",
			"value": ""
		},
		{
			"key": "rmoOfferId4",
			"value": ""
		},
		{
			"key": "rmoOfferId5",
			"value": ""
		},
		{
			"key": "rmoOfferId6",
			"value": ""
		},
		{
			"key": "rmoOfferId7",
			"value": ""
		},
		{
			"key": "rmoOfferId8",
			"value": ""
		},
		{
			"key": "rmoOfferId9",
			"value": ""
		},
		{
			"key": "rmoOfferId10",
			"value": ""
		}
	]
}